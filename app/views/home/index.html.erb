<%= render 'js_file'%>
<article>
<h1>Screen Recording App</h1><br/><br/><br/>
  <div class="sample">
    <form>
      <textarea id="froala_content" name="content"></textarea>
    </form>
  </div>

<br/><br/><br/>
<center>
  <h5>Copy the embed code and past in the editor video embed area</h5>
  <textarea id="copy-the-video" style="height: 50px;width: 600px;"></textarea>
</center>
  <section class="experiment recordrtc">
    <h2 class="header" style="margin: 0;">
      <select class="recording-media">
        <option value="record-screen">Full Screen</option>
        <option value="record-audio-plus-screen">Microphone+Screen</option>
      </select>

      <span style="font-size: 15px;">into</span>

      <select class="media-container-format">
        <option>default</option>
        <option>vp8</option>
        <option>vp9</option>
        <option>h264</option>
        <option>mkv</option>
        <option>opus</option>
        <option>ogg</option>
        <option>pcm</option>
        <option>gif</option>
        <option>whammy</option>
        <option>WebAssembly</option>
      </select>

      <input type="checkbox" id="chk-timeSlice" style="margin:0;width:auto;" title="Use intervals based recording">
      <label for="chk-timeSlice" style="font-size: 15px;margin:0;width: auto;cursor: pointer;-webkit-user-select:none;user-select:none;" title="Use intervals based recording">Use timeSlice?</label>

      <br>

      <button id="btn-start-recording">Start Recording</button>

      <button id="btn-pause-recording" style="display: none; font-size: 15px;">Pause</button>

      <hr style="border-top: 0;border-bottom: 1px solid rgb(189, 189, 189);margin: 4px -12px;margin-top: 8px;">
      <select class="media-resolutions">
        <option value="default">Default resolutions</option>
        <option value="1920x1080">1080p</option>
        <option value="1280x720">720p</option>
        <option value="640x480">480p</option>
        <option value="3840x2160">4K Ultra HD (3840x2160)</option>
      </select>

      <select class="media-framerates">
        <option value="default">Default framerates</option>
        <option value="5">5 fps</option>
        <option value="15">15 fps</option>
        <option value="24">24 fps</option>
        <option value="30">30 fps</option>
        <option value="60">60 fps</option>
      </select>

      <select class="media-bitrates">
        <option value="default">Default bitrates</option>
        <option value="8000000000">1 GB bps</option>
        <option value="800000000">100 MB bps</option>
        <option value="8000000">1 MB bps</option>
        <option value="800000">100 KB bps</option>
        <option value="8000">1 KB bps</option>
        <option value="800">100 Bytes bps</option>
      </select>
    </h2>

    <div style="text-align: center; display: none;">
      <button id="save-to-disk">Save To Disk</button>
      <span id="upload-to-php">Save to Local</span>
      <button id="open-new-tab">Open New Tab</button>
    </div>

    <div style="margin-top: 10px;" id="recording-player"></div>
  </section>

  <script>
      (function() {
          var params = {},
              r = /([^&=]+)=?([^&]*)/g;

          function d(s) {
              return decodeURIComponent(s.replace(/\+/g, ' '));
          }

          var match, search = window.location.search;
          while (match = r.exec(search.substring(1))) {
              params[d(match[1])] = d(match[2]);

              if(d(match[2]) === 'true' || d(match[2]) === 'false') {
                  params[d(match[1])] = d(match[2]) === 'true' ? true : false;
              }
          }

          window.params = params;
      })();

      function addStreamStopListener(stream, callback) {
          stream.addEventListener('ended', function() {
              callback();
              callback = function() {};
          }, false);
          stream.addEventListener('inactive', function() {
              callback();
              callback = function() {};
          }, false);
          stream.getTracks().forEach(function(track) {
              track.addEventListener('ended', function() {
                  callback();
                  callback = function() {};
              }, false);
              track.addEventListener('inactive', function() {
                  callback();
                  callback = function() {};
              }, false);
          });
      }
  </script>

  <script>
      var video = document.createElement('video');
      video.controls = false;
      var mediaElement = getHTMLMediaElement(video, {
          title: 'Recording status: inactive',
          buttons: ['full-screen'/*, 'take-snapshot'*/],
          showOnMouseEnter: false,
          width: 360,
          onTakeSnapshot: function() {
              var canvas = document.createElement('canvas');
              canvas.width = mediaElement.clientWidth;
              canvas.height = mediaElement.clientHeight;

              var context = canvas.getContext('2d');
              context.drawImage(recordingPlayer, 0, 0, canvas.width, canvas.height);

              window.open(canvas.toDataURL('image/png'));
          }
      });
      document.getElementById('recording-player').appendChild(mediaElement);

      var div = document.createElement('section');
      mediaElement.media.parentNode.appendChild(div);
      mediaElement.media.muted = false;
      mediaElement.media.autoplay = true;
      mediaElement.media.playsinline = true;
      div.appendChild(mediaElement.media);
      
      var recordingPlayer = mediaElement.media;
      var recordingMedia = document.querySelector('.recording-media');
      var mediaContainerFormat = document.querySelector('.media-container-format');
      var mimeType = 'video/webm';
      var fileExtension = 'webm';
      var type = 'video';
      var recorderType;
      var defaultWidth;
      var defaultHeight;

      var btnStartRecording = document.querySelector('#btn-start-recording');

      window.onbeforeunload = function() {
          btnStartRecording.disabled = false;
          recordingMedia.disabled = false;
          mediaContainerFormat.disabled = false;

      };

      btnStartRecording.onclick = function(event) {

          var button = btnStartRecording;

          if(button.innerHTML === 'Stop Recording') {
              btnPauseRecording.style.display = 'none';
              button.disabled = true;
              button.disableStateWaiting = true;
              setTimeout(function() {
                  button.disabled = false;
                  button.disableStateWaiting = false;
              }, 2000);

              button.innerHTML = 'Start Recording';

              function stopStream() {
                  if(button.stream && button.stream.stop) {
                      button.stream.stop();
                      button.stream = null;
                  }

                  if(button.stream instanceof Array) {
                      button.stream.forEach(function(stream) {
                          stream.stop();
                      });
                      button.stream = null;
                  }

                  videoBitsPerSecond = null;
                  $("#screenRecordingButton-1 .fa.fa-circle").css("color", "black")
                  $("#upload-to-php").click();
                  var html = 'Recording status: stopped';
                  html += '<br>Size: ' + bytesToSize(button.recordRTC.getBlob().size);
                  recordingPlayer.parentNode.parentNode.querySelector('h2').innerHTML = html;
              }

              if(button.recordRTC) {
                  if(button.recordRTC.length) {
                      button.recordRTC[0].stopRecording(function(url) {
                          if(!button.recordRTC[1]) {
                              button.recordingEndedCallback(url);
                              stopStream();

                              saveToDiskOrOpenNewTab(button.recordRTC[0]);
                              return;
                          }

                          button.recordRTC[1].stopRecording(function(url) {
                              button.recordingEndedCallback(url);
                              stopStream();
                          });
                      });
                  }
                  else {
                      button.recordRTC.stopRecording(function(url) {
                          if(button.blobs && button.blobs.length) {
                              var blob = new File(button.blobs, getFileName(fileExtension), {
                                  type: mimeType
                              });
                              
                              button.recordRTC.getBlob = function() {
                                  return blob;
                              };

                              url = URL.createObjectURL(blob);
                          }

                          button.recordingEndedCallback(url);
                          saveToDiskOrOpenNewTab(button.recordRTC);
                          stopStream();
                      });
                  }
              }

              return;
          }

          if(!event) return;

          button.disabled = true;

          var commonConfig = {
              onMediaCaptured: function(stream) {
                  button.stream = stream;
                  if(button.mediaCapturedCallback) {
                      button.mediaCapturedCallback();
                  }

                  button.innerHTML = 'Stop Recording';
                  button.disabled = false;

              },
              onMediaStopped: function() {
                  button.innerHTML = 'Start Recording';

                  if(!button.disableStateWaiting) {
                      button.disabled = false;
                  }

              },
              onMediaCapturingFailed: function(error) {
                  console.error('onMediaCapturingFailed:', error);

                  if(error.toString().indexOf('no audio or video tracks available') !== -1) {
                      alert('RecordRTC failed to start because there are no audio or video tracks available.');
                  }
                  
                  if(error.name === 'PermissionDeniedError' && DetectRTC.browser.name === 'Firefox') {
                      alert('Firefox requires version >= 52. Firefox also requires HTTPs.');
                  }

                  commonConfig.onMediaStopped();
              }
          };

          if(mediaContainerFormat.value === 'h264') {
              mimeType = 'video/webm\;codecs=h264';
              fileExtension = 'mp4';

              // video/mp4;codecs=avc1    
              if(isMimeTypeSupported('video/mpeg')) {
                  mimeType = 'video/mpeg';
              }
          }

          if(mediaContainerFormat.value === 'mkv' && isMimeTypeSupported('video/x-matroska;codecs=avc1')) {
              mimeType = 'video/x-matroska;codecs=avc1';
              fileExtension = 'mkv';
          }

          if(mediaContainerFormat.value === 'vp8' && isMimeTypeSupported('video/webm\;codecs=vp8')) {
              mimeType = 'video/webm\;codecs=vp8';
              fileExtension = 'webm';
              recorderType = null;
              type = 'video';
          }

          if(mediaContainerFormat.value === 'vp9' && isMimeTypeSupported('video/webm\;codecs=vp9')) {
              mimeType = 'video/webm\;codecs=vp9';
              fileExtension = 'webm';
              recorderType = null;
              type = 'video';
          }

          if(mediaContainerFormat.value === 'pcm') {
              mimeType = 'audio/wav';
              fileExtension = 'wav';
              recorderType = StereoAudioRecorder;
              type = 'audio';
          }

          if(mediaContainerFormat.value === 'opus' || mediaContainerFormat.value === 'ogg') {
              if(isMimeTypeSupported('audio/webm')) {
                  mimeType = 'audio/webm';
                  fileExtension = 'webm'; // webm
              }

              if(isMimeTypeSupported('audio/ogg')) {
                  mimeType = 'audio/ogg; codecs=opus';
                  fileExtension = 'ogg'; // ogg
              }

              recorderType = null;
              type = 'audio';
          }

          if(mediaContainerFormat.value === 'whammy') {
              mimeType = 'video/webm';
              fileExtension = 'webm';
              recorderType = WhammyRecorder;
              type = 'video';
          }

          if(mediaContainerFormat.value === 'WebAssembly') {
              mimeType = 'video/webm';
              fileExtension = 'webm';
              recorderType = WebAssemblyRecorder;
              type = 'video';
          }

          if(mediaContainerFormat.value === 'gif') {
              mimeType = 'image/gif';
              fileExtension = 'gif';
              recorderType = GifRecorder;
              type = 'gif';
          }

          if(mediaContainerFormat.value === 'default') {
              mimeType = 'video/webm';
              fileExtension = 'webm';
              recorderType = null;
              type = 'video';
          }

          if(recordingMedia.value === 'record-screen') {
              captureScreen(commonConfig);

              button.mediaCapturedCallback = function() {
                  var options = {
                      type: type,
                      mimeType: mimeType,
                      disableLogs: params.disableLogs || false,
                      getNativeBlob: false, // enable it for longer recordings
                      video: recordingPlayer
                  };

                  if(recorderType) {
                      options.recorderType = recorderType;

                      if(recorderType == WhammyRecorder || recorderType == GifRecorder || recorderType == WebAssemblyRecorder) {
                          options.canvas = options.video = {
                              width: defaultWidth || 320,
                              height: defaultHeight || 240
                          };
                      }
                  }

                  if(videoBitsPerSecond) {
                      options.videoBitsPerSecond = videoBitsPerSecond;
                  }

                  options.ignoreMutedMedia = false;
                  button.recordRTC = RecordRTC(button.stream, options);

                  button.recordingEndedCallback = function(url) {
                      setVideoURL(url);
                  };

                  button.recordRTC.startRecording();
                  btnPauseRecording.style.display = '';
              };
          }

          // note: audio+tab is supported in Chrome 50+
          // todo: add audio+tab recording
          if(recordingMedia.value === 'record-audio-plus-screen') {
              captureAudioPlusScreen(commonConfig);

              button.mediaCapturedCallback = function() {
                  var options = {
                      type: type,
                      mimeType: mimeType,
                      disableLogs: params.disableLogs || false,
                      getNativeBlob: false, // enable it for longer recordings
                      video: recordingPlayer
                  };

                  if(recorderType) {
                      options.recorderType = recorderType;

                      if(recorderType == WhammyRecorder || recorderType == GifRecorder || recorderType == WebAssemblyRecorder) {
                          options.canvas = options.video = {
                              width: defaultWidth || 320,
                              height: defaultHeight || 240
                          };
                      }
                  }

                  if(videoBitsPerSecond) {
                      options.videoBitsPerSecond = videoBitsPerSecond;
                  }

                  options.ignoreMutedMedia = false;
                  button.recordRTC = RecordRTC(button.stream, options);

                  button.recordingEndedCallback = function(url) {
                      setVideoURL(url);
                  };

                  button.recordRTC.startRecording();
                  btnPauseRecording.style.display = '';
              };
          }
      };

      function captureVideo(config) {
          captureUserMedia({video: true}, function(videoStream) {
              config.onMediaCaptured(videoStream);

              addStreamStopListener(videoStream, function() {
                  config.onMediaStopped();
              });
          }, function(error) {
              config.onMediaCapturingFailed(error);
          });
      }

      function captureAudio(config) {
          captureUserMedia({audio: true}, function(audioStream) {
              config.onMediaCaptured(audioStream);

              addStreamStopListener(audioStream, function() {
                  config.onMediaStopped();
              });
          }, function(error) {
              config.onMediaCapturingFailed(error);
          });
      }

      function captureAudioPlusVideo(config) {
          captureUserMedia({video: true, audio: true}, function(audioVideoStream) {
              config.onMediaCaptured(audioVideoStream);

              if(audioVideoStream instanceof Array) {
                  audioVideoStream.forEach(function(stream) {
                      addStreamStopListener(stream, function() {
                          config.onMediaStopped();
                      });
                  });
                  return;
              }

              addStreamStopListener(audioVideoStream, function() {
                  config.onMediaStopped();
              });
          }, function(error) {
              config.onMediaCapturingFailed(error);
          });
      }

      var MY_DOMAIN = 'webrtc-experiment.com';

      function isMyOwnDomain() {
          // replace "webrtc-experiment.com" with your own domain name
          return document.domain.indexOf(MY_DOMAIN) !== -1;
      }

      function isLocalHost() {
          // "chrome.exe" --enable-usermedia-screen-capturing
          // or firefox => about:config => "media.getusermedia.screensharing.allowed_domains" => add "localhost"
          return document.domain === 'localhost' || document.domain === '127.0.0.1';
      }

      var videoBitsPerSecond;

      function setVideoBitrates() {
          var select = document.querySelector('.media-bitrates');
          var value = select.value;

          if(value == 'default') {
              videoBitsPerSecond = null;
              return;
          }

          videoBitsPerSecond = parseInt(value);
      }

      function getFrameRates(mediaConstraints) {
          if(!mediaConstraints.video) {
              return mediaConstraints;
          }

          var select = document.querySelector('.media-framerates');
          var value = select.value;

          if(value == 'default') {
              return mediaConstraints;
          }

          value = parseInt(value);

          if(DetectRTC.browser.name === 'Firefox') {
              mediaConstraints.video.frameRate = value;
              return mediaConstraints;
          }

          if(!mediaConstraints.video.mandatory) {
              mediaConstraints.video.mandatory = {};
              mediaConstraints.video.optional = [];
          }

          var isScreen = recordingMedia.value.toString().toLowerCase().indexOf('screen') != -1;
          if(isScreen) {
              mediaConstraints.video.mandatory.maxFrameRate = value;
          }
          else {
              mediaConstraints.video.mandatory.minFrameRate = value;
          }

          return mediaConstraints;
      }

      function setGetFromLocalStorage(selectors) {
          selectors.forEach(function(selector) {
              var storageItem = selector.replace(/\.|#/g, '');
              if(localStorage.getItem(storageItem)) {
                  document.querySelector(selector).value = localStorage.getItem(storageItem);
              }

              addEventListenerToUploadLocalStorageItem(selector, ['change', 'blur'], function() {
                  localStorage.setItem(storageItem, document.querySelector(selector).value);
              });
          });
      }

      function addEventListenerToUploadLocalStorageItem(selector, arr, callback) {
          arr.forEach(function(event) {
              document.querySelector(selector).addEventListener(event, callback, false);
          });
      }

      setGetFromLocalStorage(['.media-resolutions', '.media-framerates', '.media-bitrates', '.recording-media', '.media-container-format']);

      function getVideoResolutions(mediaConstraints) {
          if(!mediaConstraints.video) {
              return mediaConstraints;
          }

          var select = document.querySelector('.media-resolutions');
          var value = select.value;

          if(value == 'default') {
              return mediaConstraints;
          }

          value = value.split('x');

          if(value.length != 2) {
              return mediaConstraints;
          }

          defaultWidth = parseInt(value[0]);
          defaultHeight = parseInt(value[1]);

          if(DetectRTC.browser.name === 'Firefox') {
              mediaConstraints.video.width = defaultWidth;
              mediaConstraints.video.height = defaultHeight;
              return mediaConstraints;
          }

          if(!mediaConstraints.video.mandatory) {
              mediaConstraints.video.mandatory = {};
              mediaConstraints.video.optional = [];
          }

          var isScreen = recordingMedia.value.toString().toLowerCase().indexOf('screen') != -1;

          if(isScreen) {
              mediaConstraints.video.mandatory.maxWidth = defaultWidth;
              mediaConstraints.video.mandatory.maxHeight = defaultHeight;
          }
          else {
              mediaConstraints.video.mandatory.minWidth = defaultWidth;
              mediaConstraints.video.mandatory.minHeight = defaultHeight;
          }

          return mediaConstraints;
      }

      function captureUserMedia(mediaConstraints, successCallback, errorCallback) {
          if(mediaConstraints.video == true) {
              mediaConstraints.video = {};
          }

          setVideoBitrates();

          mediaConstraints = getVideoResolutions(mediaConstraints);
          mediaConstraints = getFrameRates(mediaConstraints);

          var isBlackBerry = !!(/BB10|BlackBerry/i.test(navigator.userAgent || ''));
          if(isBlackBerry && !!(navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia)) {
              navigator.getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia;
              navigator.getUserMedia(mediaConstraints, successCallback, errorCallback);
              return;
          }

          navigator.mediaDevices.getUserMedia(mediaConstraints).then(function(stream) {
              successCallback(stream);

              setVideoURL(stream, true);
          }).catch(function(error) {
              if(error && (error.name === 'ConstraintNotSatisfiedError' || error.name === 'OverconstrainedError')) {
                  alert('Your camera or browser does NOT supports selected resolutions or frame-rates. \n\nPlease select "default" resolutions.');
              }
              else if(error && error.message) {
                  alert(error.message);
              }
              else {
                  alert('Unable to make getUserMedia request. Please check browser console logs.');
              }

              errorCallback(error);
          });
      }

      function setMediaContainerFormat(arrayOfOptionsSupported) {
          var options = Array.prototype.slice.call(
              mediaContainerFormat.querySelectorAll('option')
          );

          var localStorageItem;
          if(localStorage.getItem('media-container-format')) {
              localStorageItem = localStorage.getItem('media-container-format');
          }

          var selectedItem;
          options.forEach(function(option) {
              option.disabled = true;

              if(arrayOfOptionsSupported.indexOf(option.value) !== -1) {
                  option.disabled = false;

                  if(localStorageItem && arrayOfOptionsSupported.indexOf(localStorageItem) != -1) {
                      if(option.value != localStorageItem) return;
                      option.selected = true;
                      selectedItem = option;
                      return;
                  }

                  if(!selectedItem) {
                      option.selected = true;
                      selectedItem = option;
                  }
              }
          });
      }

      function isMimeTypeSupported(mimeType) {
          if(typeof MediaRecorder === 'undefined') {
              return false;
          }

          if(typeof MediaRecorder.isTypeSupported !== 'function') {
              return true;
          }

          return MediaRecorder.isTypeSupported(mimeType);
      }

      recordingMedia.onchange = function() {
          if(recordingMedia.value === 'record-audio') {
              var recordingOptions = [];
              
              if(isMimeTypeSupported('audio/webm')) {
                  recordingOptions.push('opus');
              }

              if(isMimeTypeSupported('audio/ogg')) {
                  recordingOptions.push('ogg');
              }

              recordingOptions.push('pcm');

              setMediaContainerFormat(recordingOptions);
              return;
          }

          var isChrome = !!window.chrome && !(!!window.opera || navigator.userAgent.indexOf(' OPR/') >= 0);

          var recordingOptions = ['vp8']; // MediaStreamRecorder with vp8

          if(isMimeTypeSupported('video/webm\;codecs=vp9')) {
              recordingOptions.push('vp9'); // MediaStreamRecorder with vp9
          }

          if(isMimeTypeSupported('video/webm\;codecs=h264')) {
              recordingOptions.push('h264'); // MediaStreamRecorder with h264
          }

          if(isMimeTypeSupported('video/x-matroska;codecs=avc1')) {
              recordingOptions.push('mkv'); // MediaStreamRecorder with mkv/matroska
          }

          recordingOptions.push('gif'); // GifRecorder

          if(DetectRTC.browser.name == 'Chrome') {
              recordingOptions.push('whammy'); // WhammyRecorder
          }

          if(DetectRTC.browser.name == 'Chrome') {
              recordingOptions.push('WebAssembly'); // WebAssemblyRecorder
          }

          recordingOptions.push('default'); // Default mimeType for MediaStreamRecorder

          setMediaContainerFormat(recordingOptions);
      };
      recordingMedia.onchange();

      if(typeof MediaRecorder === 'undefined' && (DetectRTC.browser.name === 'Edge' || DetectRTC.browser.name === 'Safari')) {
          // webp isn't supported in Microsoft Edge
          // neither MediaRecorder API
          // so lets disable both video/screen recording options

          console.warn('Neither MediaRecorder API nor webp is supported in ' + DetectRTC.browser.name + '. You cam merely record audio.');

          recordingMedia.innerHTML = '<option value="record-audio">Audio</option>';
          setMediaContainerFormat(['pcm']);
      }

      function stringify(obj) {
          var result = '';
          Object.keys(obj).forEach(function(key) {
              if(typeof obj[key] === 'function') {
                  return;
              }

              if(result.length) {
                  result += ',';
              }

              result += key + ': ' + obj[key];
          });

          return result;
      }

      function mediaRecorderToStringify(mediaRecorder) {
          var result = '';
          result += 'mimeType: ' + mediaRecorder.mimeType;
          result += ', state: ' + mediaRecorder.state;
          result += ', audioBitsPerSecond: ' + mediaRecorder.audioBitsPerSecond;
          result += ', videoBitsPerSecond: ' + mediaRecorder.videoBitsPerSecond;
          if(mediaRecorder.stream) {
              result += ', streamid: ' + mediaRecorder.stream.id;
              result += ', stream-active: ' + mediaRecorder.stream.active;
          }
          return result;
      }

      function getFailureReport() {
          var info = 'RecordRTC seems failed. \n\n' + stringify(DetectRTC.browser) + '\n\n' + DetectRTC.osName + ' ' + DetectRTC.osVersion + '\n';

          if (typeof recorderType !== 'undefined' && recorderType) {
              info += '\nrecorderType: ' + recorderType.name;
          }

          if (typeof mimeType !== 'undefined') {
              info += '\nmimeType: ' + mimeType;
          }

          Array.prototype.slice.call(document.querySelectorAll('select')).forEach(function(select) {
              info += '\n' + (select.id || select.className) + ': ' + select.value;
          });

          if (btnStartRecording.recordRTC) {
              info += '\n\ninternal-recorder: ' + btnStartRecording.recordRTC.getInternalRecorder().name;
              
              if(btnStartRecording.recordRTC.getInternalRecorder().getAllStates) {
                  info += '\n\nrecorder-states: ' + btnStartRecording.recordRTC.getInternalRecorder().getAllStates();
              }
          }

          if(btnStartRecording.stream) {
              info += '\n\naudio-tracks: ' + getTracks(btnStartRecording.stream, 'audio').length;
              info += '\nvideo-tracks: ' + getTracks(btnStartRecording.stream, 'video').length;
              info += '\nstream-active? ' + !!btnStartRecording.stream.active;

              btnStartRecording.stream.getTracks().forEach(function(track) {
                  info += '\n' + track.kind + '-track-' + (track.label || track.id) + ': (enabled: ' + !!track.enabled + ', readyState: ' + track.readyState + ', muted: ' + !!track.muted + ')';

                  if(track.getConstraints && Object.keys(track.getConstraints()).length) {
                      info += '\n' + track.kind + '-track-getConstraints: ' + stringify(track.getConstraints());
                  }

                  if(track.getSettings && Object.keys(track.getSettings()).length) {
                      info += '\n' + track.kind + '-track-getSettings: ' + stringify(track.getSettings());
                  }
              });
          }

          if(timeSlice && btnStartRecording.recordRTC) {
              info += '\ntimeSlice: ' + timeSlice;

              if(btnStartRecording.recordRTC.getInternalRecorder().getArrayOfBlobs) {
                  var blobSizes = [];
                  btnStartRecording.recordRTC.getInternalRecorder().getArrayOfBlobs().forEach(function(blob) {
                      blobSizes.push(blob.size);
                  });
                  info += '\nblobSizes: ' + blobSizes;
              }
          }

          else if(btnStartRecording.recordRTC && btnStartRecording.recordRTC.getBlob()) {
              info += '\n\nblobSize: ' + bytesToSize(btnStartRecording.recordRTC.getBlob().size);
          }

          if(btnStartRecording.recordRTC && btnStartRecording.recordRTC.getInternalRecorder() && btnStartRecording.recordRTC.getInternalRecorder().getInternalRecorder && btnStartRecording.recordRTC.getInternalRecorder().getInternalRecorder()) {
              info += '\n\ngetInternalRecorder: ' + mediaRecorderToStringify(btnStartRecording.recordRTC.getInternalRecorder().getInternalRecorder());
          }

          return info;
      }

      function saveToDiskOrOpenNewTab(recordRTC) {
          if(!recordRTC.getBlob().size) {
              var info = getFailureReport();
              console.log('blob', recordRTC.getBlob());
              console.log('recordrtc instance', recordRTC);
              console.log('report', info);

              if(mediaContainerFormat.value !== 'default') {
                  alert('RecordRTC seems failed recording using ' + mediaContainerFormat.value + '. Please choose "default" option from the drop down and record again.');
              }
              else {
                  alert('RecordRTC seems failed. Unexpected issue. You can read the email in your console log. \n\nPlease report using disqus chat below.');
              }

              if(mediaContainerFormat.value !== 'vp9' && DetectRTC.browser.name === 'Chrome') {
                  alert('Please record using VP9 encoder. (select from the dropdown)');
              }
          }

          var fileName = getFileName(fileExtension);

          document.querySelector('#save-to-disk').parentNode.style.display = 'block';
          document.querySelector('#save-to-disk').onclick = function() {

              if(!recordRTC) return alert('No recording found.');

              var file = new File([recordRTC.getBlob()], fileName, {
                  type: mimeType
              });

              invokeSaveAsDialog(file, file.name);
          };

          document.querySelector('#open-new-tab').onclick = function() {
              if(!recordRTC) return alert('No recording found.');

              var file = new File([recordRTC.getBlob()], fileName, {
                  type: mimeType
              });

              window.open(URL.createObjectURL(file));
          };

          // upload to PHP server
          document.querySelector('#upload-to-php').disabled = false;
          document.querySelector('#upload-to-php').onclick = function() {
              if(!recordRTC) return alert('No recording found.');
              this.disabled = true;

              var button = this;
              uploadToPHPServer(fileName, recordRTC, function(progress, fileURL) {
                  if(progress === 'ended') {
                      button.disabled = false;
                      button.innerHTML = 'Click to download from server';
                      button.onclick = function() {
                          SaveFileURLToDisk(fileURL, fileName);
                      };

                      setVideoURL(fileURL);

                      var html = 'Uploaded to PHP.<br>Download using below link:<br>';
                      html += '<a href="'+fileURL+'" download="'+fileName+'" style="color: yellow; display: block; margin-top: 15px;">'+fileName+'</a>';
                      recordingPlayer.parentNode.parentNode.querySelector('h2').innerHTML = html;
                      return;
                  }
                  button.innerHTML = progress;
                  recordingPlayer.parentNode.parentNode.querySelector('h2').innerHTML = progress;
              });
          };
      }

      function uploadToPHPServer(fileName, recordRTC, callback) {
          var blob = recordRTC instanceof Blob ? recordRTC : recordRTC.getBlob();
          
          blob = new File([blob], getFileName(fileExtension), {
              type: mimeType
          });

          // create FormData
          var formData = new FormData();
          formData.append('video-filename', fileName);
          formData.append('video-blob', blob);

          callback('Uploading recorded-file to server.');

          var upload_url = '/home';
          // var upload_url = 'RecordRTC-to-PHP/save.php';

          var upload_directory = upload_url;
          // var upload_directory = 'RecordRTC-to-PHP/uploads/';

          $.ajax({
            url: upload_url, // replace with your own server URL
            data: formData,
            cache: false,
            contentType: false,
            processData: false,
            type: 'POST',
            success: function(response) {
              if (response["status"] === true) {
                // alert('Video is successfully uploaded: ' + response["video_url"]);
                $('#copy-the-video').val("<embed src="+response["video_url"]+">");
                  
              } else {
                alert(response); // error/failure
              }
            }
          });
      }

      function makeXMLHttpRequest(url, data, callback) {
          var request = new XMLHttpRequest();
          request.onreadystatechange = function() {
              if (request.readyState == 4 && request.status == 200) {
                  if(request.responseText === 'success') {
                      callback('upload-ended');
                      return;
                  }

                  document.querySelector('.header').parentNode.style = 'text-align: left; color: red; padding: 5px 10px;';
                  document.querySelector('.header').parentNode.innerHTML = request.responseText;
              }
          };

          request.upload.onloadstart = function() {
              callback('Upload started...');
          };

          request.upload.onprogress = function(event) {
              callback('Upload Progress ' + Math.round(event.loaded / event.total * 100) + "%");
          };

          request.upload.onload = function() {
              callback('progress-about-to-end');
          };

          request.upload.onload = function() {
              callback('Getting File URL..');
          };

          request.upload.onerror = function(error) {
              callback('Failed to upload to server');
          };

          request.upload.onabort = function(error) {
              callback('Upload aborted.');
          };

          request.open('POST', url);
          request.send(data);
      }

      function getRandomString() {
          if (window.crypto && window.crypto.getRandomValues && navigator.userAgent.indexOf('Safari') === -1) {
              var a = window.crypto.getRandomValues(new Uint32Array(3)),
                  token = '';
              for (var i = 0, l = a.length; i < l; i++) {
                  token += a[i].toString(36);
              }
              return token;
          } else {
              return (Math.random() * new Date().getTime()).toString(36).replace(/\./g, '');
          }
      }

      function getFileName(fileExtension) {
          var d = new Date();
          var year = d.getUTCFullYear();
          var month = d.getUTCMonth();
          var date = d.getUTCDate();
          return 'RecordRTC-' + year + month + date + '-' + getRandomString() + '.' + fileExtension;
      }

      function SaveFileURLToDisk(fileUrl, fileName) {
          var hyperlink = document.createElement('a');
          hyperlink.href = fileUrl;
          hyperlink.target = '_blank';
          hyperlink.download = fileName || fileUrl;

          (document.body || document.documentElement).appendChild(hyperlink);
          hyperlink.onclick = function() {
             (document.body || document.documentElement).removeChild(hyperlink);

             // required for Firefox
             window.URL.revokeObjectURL(hyperlink.href);
          };

          var mouseEvent = new MouseEvent('click', {
              view: window,
              bubbles: true,
              cancelable: true
          });

          hyperlink.dispatchEvent(mouseEvent);
      }

      function getURL(arg) {
          var url = arg;

          if(arg instanceof Blob || arg instanceof File) {
              url = URL.createObjectURL(arg);
          }

          if(arg instanceof RecordRTC || arg.getBlob) {
              url = URL.createObjectURL(arg.getBlob());
          }

          if(arg instanceof MediaStream || arg.getTracks) {
              // url = URL.createObjectURL(arg);
          }

          return url;
      }

      function setVideoURL(arg, forceNonImage) {
          var url = getURL(arg);

          var parentNode = recordingPlayer.parentNode;
          parentNode.removeChild(recordingPlayer);
          parentNode.innerHTML = '';

          var elem = 'video';
          if(type == 'gif' && !forceNonImage) {
              elem = 'img';
          }
          if(type == 'audio') {
              elem = 'audio';
          }

          recordingPlayer = document.createElement(elem);
          
          if(arg instanceof MediaStream) {
              recordingPlayer.muted = true;
          }

          recordingPlayer.addEventListener('loadedmetadata', function() {
              if(navigator.userAgent.toLowerCase().indexOf('android') == -1) return;

              // android
              setTimeout(function() {
                  if(typeof recordingPlayer.play === 'function') {
                      recordingPlayer.play();
                  }
              }, 2000);
          }, false);

          recordingPlayer.poster = '';

          if(arg instanceof MediaStream) {
              recordingPlayer.srcObject = arg;
          }
          else {
              recordingPlayer.src = url;
          }

          if(typeof recordingPlayer.play === 'function') {
              recordingPlayer.play();
          }

          recordingPlayer.addEventListener('ended', function() {
              url = getURL(arg);
              
              if(arg instanceof MediaStream) {
                  recordingPlayer.srcObject = arg;
              }
              else {
                  recordingPlayer.src = url;
              }
          });

          parentNode.appendChild(recordingPlayer);
      }
  </script>

  <script>
      function captureScreen(config) {
          if (navigator.getDisplayMedia) {
              navigator.getDisplayMedia({
                  video: true
              }).then(screenStream => {
                  config.onMediaCaptured(screenStream);

                  addStreamStopListener(screenStream, function() {
                      // config.onMediaStopped();

                      btnStartRecording.onclick();
                  });

                  setVideoURL(screenStream, true);
              }).catch(function(error) {
                  config.onMediaCapturingFailed(error);
              });
          } else if (navigator.mediaDevices.getDisplayMedia) {
              navigator.mediaDevices.getDisplayMedia({
                  video: true
              }).then(screenStream => {
                  config.onMediaCaptured(screenStream);

                  addStreamStopListener(screenStream, function() {
                      // config.onMediaStopped();

                      btnStartRecording.onclick();
                  });

                  setVideoURL(screenStream, true);
              }).catch(function(error) {
                  config.onMediaCapturingFailed(error);
              });
          } else {
              var error = 'getDisplayMedia API are not supported in this browser.';
              config.onMediaCapturingFailed(error);
              alert(error);
          }
      }

      function captureAudioPlusScreen(config) {
          if (navigator.getDisplayMedia) {
              navigator.getDisplayMedia({
                  video: true
              }).then(screenStream => {
                  navigator.mediaDevices.getUserMedia({audio:true}).then(function(mic) {
                      screenStream.addTrack(mic.getTracks()[0]);

                      config.onMediaCaptured(screenStream);

                      addStreamStopListener(screenStream, function() {
                          // config.onMediaStopped();

                          btnStartRecording.onclick();
                      });

                      setVideoURL(screenStream, true);
                  });
              }).catch(function(error) {
                  config.onMediaCapturingFailed(error);
              });
          } else if (navigator.mediaDevices.getDisplayMedia) {
              navigator.mediaDevices.getDisplayMedia({
                  video: true
              }).then(screenStream => {
                  navigator.mediaDevices.getUserMedia({audio:true}).then(function(mic) {
                      screenStream.addTrack(mic.getTracks()[0]);

                      config.onMediaCaptured(screenStream);

                      addStreamStopListener(screenStream, function() {
                          // config.onMediaStopped();

                          btnStartRecording.onclick();
                      });

                      setVideoURL(screenStream, true);
                  });
              }).catch(function(error) {
                  config.onMediaCapturingFailed(error);
              });
          } else {
              var error = 'getDisplayMedia API are not supported in this browser.';
              config.onMediaCapturingFailed(error);
              alert(error);
          }
      }
  </script>

  <script>
      var chkTimeSlice = document.querySelector('#chk-timeSlice');
      var timeSlice = false;

      if(typeof MediaRecorder === 'undefined') {
          chkTimeSlice.disabled = true;
      }

      chkTimeSlice.addEventListener('change', function() {
          if(chkTimeSlice.checked === true) {
              var _timeSlice = prompt('Please enter timeSlice in milliseconds e.g. 1000 or 2000 or 3000.', 1000);
              _timeSlice = parseInt(_timeSlice);
              if(!_timeSlice || _timeSlice == NaN || typeof _timeSlice === 'undefined') {
                  timeSlice = false;
                  return;
              }

              timeSlice = _timeSlice;
          }
          else {
              timeSlice = false;
          }
      }, false);
  </script>

  <script>
      var btnPauseRecording = document.querySelector('#btn-pause-recording');
      btnPauseRecording.onclick = function() {
          if(!btnStartRecording.recordRTC) {
              btnPauseRecording.style.display = 'none';
              return;
          }

          btnPauseRecording.disabled = true;
          if(btnPauseRecording.innerHTML === 'Pause') {
              btnStartRecording.disabled = true;
              btnStartRecording.style.fontSize = '15px';
              btnStartRecording.recordRTC.pauseRecording();
              recordingPlayer.parentNode.parentNode.querySelector('h2').innerHTML = 'Recording status: paused';
              recordingPlayer.pause();

              btnPauseRecording.style.fontSize = 'inherit';
              setTimeout(function() {
                  btnPauseRecording.innerHTML = 'Resume Recording';
                  btnPauseRecording.disabled = false;
              }, 2000);
          }

          if(btnPauseRecording.innerHTML === 'Resume Recording') {
              btnStartRecording.disabled = false;
              btnStartRecording.style.fontSize = 'inherit';
              btnStartRecording.recordRTC.resumeRecording();
              recordingPlayer.parentNode.parentNode.querySelector('h2').innerHTML = '<img src="//cdn.webrtc-experiment.com/images/progress.gif">';
              recordingPlayer.play();

              btnPauseRecording.style.fontSize = '15px';
              btnPauseRecording.innerHTML = 'Pause';
              setTimeout(function() {
                  btnPauseRecording.disabled = false;
              }, 2000);
          }
      };
  </script>

</article>
  <!-- commits.js is useless for you! -->
<script src="//cdn.webrtc-experiment.com/commits.js" async></script>
<script src="//apis.google.com/js/client:plusone.js"></script>
<script>
  // Change the bold icon.  
  // Define a font icon called magicIcon.
  // Because no template was specified, the default one will be used.
  $.FroalaEditor.DefineIcon('screenRecording', {NAME: 'circle'});
  $.FroalaEditor.RegisterCommand('screenRecordingButton', {
    title: 'Screen Recording',
    icon: 'screenRecording'
  });
</script>  
<script>
  $(function() {
    $('#froala_content').froalaEditor({
      toolbarButtons: ['bold', 'italic', 'underline', 'strikeThrough', 'subscript', 'superscript', 'fontFamily', 'fontSize', 'color', 'formatBlock', 'blockStyle', 'inlineStyle', 'align', 'insertOrderedList', 'insertUnorderedList', 'outdent', 'indent', 'selectAll', 'createLink', 'insertImage', 'insertVideo', 'table', 'undo', 'redo', 'html', 'screenRecordingButton']
    });
  });
</script>
<style type="text/css">
  #screenRecordingButton-1 .fa.fa-circle{
    border: 1px solid black !important;
    border-radius: 50% !important;
    padding: 4px !important;
    margin: 6px !important;
    color: black;
  }
</style>
<script type="text/javascript">
  $(document).ready(function() {
    $("#screenRecordingButton-1").click(function(){
      var button = btnStartRecording;
          if(button.innerHTML === 'Stop Recording') {
              btnPauseRecording.style.display = 'none';
              button.disabled = true;
              button.disableStateWaiting = true;
              setTimeout(function() {
                  button.disabled = false;
                  button.disableStateWaiting = false;
              }, 2000);

              button.innerHTML = 'Start Recording';

              function stopStream() {

                  if(button.stream && button.stream.stop) {
                      button.stream.stop();
                      button.stream = null;
                  }

                  if(button.stream instanceof Array) {
                      button.stream.forEach(function(stream) {
                          stream.stop();
                      });
                      button.stream = null;
                  }

                  videoBitsPerSecond = null;
                  var html = 'Recording status: stopped';
                  html += '<br>Size: ' + bytesToSize(button.recordRTC.getBlob().size);
                  recordingPlayer.parentNode.parentNode.querySelector('h2').innerHTML = html;
              }

              if(button.recordRTC) {
                  if(button.recordRTC.length) {
                      button.recordRTC[0].stopRecording(function(url) {
                          if(!button.recordRTC[1]) {
                              button.recordingEndedCallback(url);
                              stopStream();

                              saveToDiskOrOpenNewTab(button.recordRTC[0]);
                              return;
                          }

                          button.recordRTC[1].stopRecording(function(url) {
                              button.recordingEndedCallback(url);
                              stopStream();
                          });
                      });
                  }
                  else {
                      button.recordRTC.stopRecording(function(url) {
                          if(button.blobs && button.blobs.length) {
                              var blob = new File(button.blobs, getFileName(fileExtension), {
                                  type: mimeType
                              });
                              
                              button.recordRTC.getBlob = function() {
                                  return blob;
                              };

                              url = URL.createObjectURL(blob);
                          }

                          button.recordingEndedCallback(url);
                          saveToDiskOrOpenNewTab(button.recordRTC);
                          stopStream();
                      });
                  }
              }

              return;
          }

          if(!event) return;

          button.disabled = true;

          var commonConfig = {
              onMediaCaptured: function(stream) {
                  button.stream = stream;
                  if(button.mediaCapturedCallback) {
                      button.mediaCapturedCallback();
                  }

                  button.innerHTML = 'Stop Recording';
                  button.disabled = false;

              },
              onMediaStopped: function() {
                  button.innerHTML = 'Start Recording';
                  if(!button.disableStateWaiting) {
                      button.disabled = false;
                  }

              },
              onMediaCapturingFailed: function(error) {
                  console.error('onMediaCapturingFailed:', error);

                  if(error.toString().indexOf('no audio or video tracks available') !== -1) {
                      alert('RecordRTC failed to start because there are no audio or video tracks available.');
                  }
                  
                  if(error.name === 'PermissionDeniedError' && DetectRTC.browser.name === 'Firefox') {
                      alert('Firefox requires version >= 52. Firefox also requires HTTPs.');
                  }

                  commonConfig.onMediaStopped();
              }
          };

          if(mediaContainerFormat.value === 'h264') {
              mimeType = 'video/webm\;codecs=h264';
              fileExtension = 'mp4';

              // video/mp4;codecs=avc1    
              if(isMimeTypeSupported('video/mpeg')) {
                  mimeType = 'video/mpeg';
              }
          }

          if(mediaContainerFormat.value === 'mkv' && isMimeTypeSupported('video/x-matroska;codecs=avc1')) {
              mimeType = 'video/x-matroska;codecs=avc1';
              fileExtension = 'mkv';
          }

          if(mediaContainerFormat.value === 'vp8' && isMimeTypeSupported('video/webm\;codecs=vp8')) {
              mimeType = 'video/webm\;codecs=vp8';
              fileExtension = 'webm';
              recorderType = null;
              type = 'video';
          }

          if(mediaContainerFormat.value === 'vp9' && isMimeTypeSupported('video/webm\;codecs=vp9')) {
              mimeType = 'video/webm\;codecs=vp9';
              fileExtension = 'webm';
              recorderType = null;
              type = 'video';
          }

          if(mediaContainerFormat.value === 'pcm') {
              mimeType = 'audio/wav';
              fileExtension = 'wav';
              recorderType = StereoAudioRecorder;
              type = 'audio';
          }

          if(mediaContainerFormat.value === 'opus' || mediaContainerFormat.value === 'ogg') {
              if(isMimeTypeSupported('audio/webm')) {
                  mimeType = 'audio/webm';
                  fileExtension = 'webm'; // webm
              }

              if(isMimeTypeSupported('audio/ogg')) {
                  mimeType = 'audio/ogg; codecs=opus';
                  fileExtension = 'ogg'; // ogg
              }

              recorderType = null;
              type = 'audio';
          }

          if(mediaContainerFormat.value === 'whammy') {
              mimeType = 'video/webm';
              fileExtension = 'webm';
              recorderType = WhammyRecorder;
              type = 'video';
          }

          if(mediaContainerFormat.value === 'WebAssembly') {
              mimeType = 'video/webm';
              fileExtension = 'webm';
              recorderType = WebAssemblyRecorder;
              type = 'video';
          }

          if(mediaContainerFormat.value === 'gif') {
              mimeType = 'image/gif';
              fileExtension = 'gif';
              recorderType = GifRecorder;
              type = 'gif';
          }

          if(mediaContainerFormat.value === 'default') {
              mimeType = 'video/webm';
              fileExtension = 'webm';
              recorderType = null;
              type = 'video';
          }

          if(recordingMedia.value === 'record-screen') {
              captureScreen(commonConfig);

              button.mediaCapturedCallback = function() {
                  var options = {
                      type: type,
                      mimeType: mimeType,
                      disableLogs: params.disableLogs || false,
                      getNativeBlob: false, // enable it for longer recordings
                      video: recordingPlayer
                  };

                  if(recorderType) {
                      options.recorderType = recorderType;

                      if(recorderType == WhammyRecorder || recorderType == GifRecorder || recorderType == WebAssemblyRecorder) {
                          options.canvas = options.video = {
                              width: defaultWidth || 320,
                              height: defaultHeight || 240
                          };
                      }
                  }

                  if(videoBitsPerSecond) {
                      options.videoBitsPerSecond = videoBitsPerSecond;
                  }

                  options.ignoreMutedMedia = false;
                  button.recordRTC = RecordRTC(button.stream, options);

                  button.recordingEndedCallback = function(url) {
                      setVideoURL(url);
                  };

                  button.recordRTC.startRecording();
                  btnPauseRecording.style.display = '';
              };
          }

          // note: audio+tab is supported in Chrome 50+
          // todo: add audio+tab recording
          if(recordingMedia.value === 'record-audio-plus-screen') {
              captureAudioPlusScreen(commonConfig);

              button.mediaCapturedCallback = function() {
                  var options = {
                      type: type,
                      mimeType: mimeType,
                      disableLogs: params.disableLogs || false,
                      getNativeBlob: false, // enable it for longer recordings
                      video: recordingPlayer
                  };

                  if(recorderType) {
                      options.recorderType = recorderType;

                      if(recorderType == WhammyRecorder || recorderType == GifRecorder || recorderType == WebAssemblyRecorder) {
                          options.canvas = options.video = {
                              width: defaultWidth || 320,
                              height: defaultHeight || 240
                          };
                      }
                  }

                  if(videoBitsPerSecond) {
                      options.videoBitsPerSecond = videoBitsPerSecond;
                  }

                  options.ignoreMutedMedia = false;
                  button.recordRTC = RecordRTC(button.stream, options);

                  button.recordingEndedCallback = function(url) {
                      setVideoURL(url);
                  };

                  button.recordRTC.startRecording();
                  $("#screenRecordingButton-1 .fa.fa-circle").css("color", "rgb(243, 0, 0)")
                  btnPauseRecording.style.display = '';
              };
          }
    });
  })
$("#recording-player").hide();
</script>

<style type="text/css">
  .header{display: none !important;}
  #save-to-disk{
     display: none !important;
  }
  #open-new-tab{
     display: none !important;
  }
</style>